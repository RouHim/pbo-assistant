name: CI/CD
on:
  push:
  pull_request:
    types:
      - opened
  workflow_dispatch: # allow manual execution

jobs:

  check-repo:
    name: Check git repository
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  check-code-style:
    name: Check code style
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt

      - uses: Swatinem/rust-cache@v2 # use /rust/cargo caching
        with:
          workspaces: "src-tauri -> target"
          cache-on-failure: true # upload cache even if there are errors in this step

      - name: Check the code style
        run: cd src-tauri && cargo fmt --all -- --check

  check-code:
    name: Check rust code
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: install dependencies
        run: |
          sudo apt update
          sudo apt install -y libwebkit2gtk-4.1-dev libxdo-dev libssl-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy

      - uses: Swatinem/rust-cache@v2 # use /rust/cargo caching
        with:
          workspaces: "src-tauri -> target"
          cache-on-failure: true # upload cache even if there are errors in this step

      - name: Verify code
        run: cd src-tauri && cargo clippy

  test:
    name: Run application tests
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: install dependencies
        run: |
          sudo apt update
          sudo apt install -y libwebkit2gtk-4.1-dev libxdo-dev libssl-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - uses: Swatinem/rust-cache@v2 # use /rust/cargo caching
        with:
          workspaces: "src-tauri -> target"
          cache-on-failure: true # upload cache even if there are errors in this step

      - name: Test code
        run: cd src-tauri && cargo test

  create-release:
    name: Create new release
    needs: [ check-repo, check-code-style, check-code, test ]
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Dependencies
        run: |
          npm install -g \
             semantic-release  \
            @semantic-release/git  \
            @semantic-release/gitlab  \
            @semantic-release/changelog  \
            @semantic-release/exec \
            @semantic-release/commit-analyzer \
            conventional-changelog-conventionalcommits

      - name: Generate Semantic Release Notes and Create Release
        id: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: npx semantic-release

      - name: Delete old releases
        uses: dev-drprasad/delete-older-releases@v0.3.4
        with:
          keep_latest: 5
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  bundle-and-upload:
    needs: [ create-release ]
    name: Bundle and upload application artifacts
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - uses: Swatinem/rust-cache@v2 # use /rust/cargo caching
        with:
          workspaces: "src-tauri -> target"
          cache-on-failure: true # upload cache even if there are errors in this step

      - name: Detect and set latest github release VERSION
        shell: bash
        run: |
          REPO="RouHim/pbo-assistant"
          curl --silent "https://api.github.com/repos/${REPO}/releases/latest"
          curl --silent "https://api.github.com/repos/${REPO}/releases/latest" | jq -r ".tag_name"
          LATEST_RELEASE=$(curl --silent "https://api.github.com/repos/${REPO}/releases/latest" | jq -r ".tag_name")
          LATEST_RELEASE=${LATEST_RELEASE#v}
          echo "Latest release is $LATEST_RELEASE"
          echo "VERSION=$LATEST_RELEASE" >> $GITHUB_ENV

      - name: Set UPLOAD_URL variable
        shell: bash
        run: |
          UPLOAD_URL=$(curl --silent https://api.github.com/repos/rouhim/pbo-assistant/releases/latest | jq -r '.upload_url')
          echo "UPLOAD_URL=${UPLOAD_URL}" >> $GITHUB_ENV

      - name: Set version
        shell: bash
        run: |
          cd src-tauri
          jq --arg new_version "${{ env.VERSION }}" '.version = $new_version' tauri.conf.json > tmp.json && mv tmp.json tauri.conf.json
          echo "Tauri version is now: $(cat tauri.conf.json | jq ".version")"
          awk -v var="${{ env.VERSION }}" '{gsub(/version = "0.0.0"/, "version = \""var"\""); print}' Cargo.toml > temp && mv temp Cargo.toml
          echo "Cargo version is now" $(cargo metadata --no-deps --format-version 1 | jq -r ".packages[0].version")
          cd ..

      - name: Install Tauri dependencies (ubuntu only)
        run: sudo apt update && sudo apt install -y libwebkit2gtk-4.0-dev build-essential curl wget file libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

      - uses: cargo-bins/cargo-binstall@main
      - name: Install Tauri-CLI
        run: cargo binstall --no-confirm --force tauri-cli

      - name: Build the app
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        run: |
          cat src-tauri/tauri.conf.json
          cargo tauri build --no-bundle
          sha256sum src-tauri/target/release/pbo-assistant > src-tauri/target/release/pbo-assistant.sha256

      - name: Upload linux Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: src-tauri/target/release/pbo-assistant
          asset_name: pbo-assistant_${{ env.VERSION }}
          asset_content_type: application/octet-stream
      - name: Upload linux Binary sha sum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: src-tauri/target/release/pbo-assistant.sha256
          asset_name: pbo-assistant_${{ env.VERSION }}.sha256
          asset_content_type: application/octet-stream

      - name: Build flatpak from binary
        run: |
          sudo apt install -y flatpak-builder
          flatpak-builder --repo=repo --force-clean build-dir .desktop/flatpak.yml
          flatpak build-bundle repo pbo-assistant.flatpak de.rouhim.pbo-assistant
